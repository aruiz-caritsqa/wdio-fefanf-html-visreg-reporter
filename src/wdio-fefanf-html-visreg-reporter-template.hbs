<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="[% title %]">

    <title>{{title}}</title>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <style type="text/css">
        body {
            background-color: #fafafa;
            font-weight: 200;
        }

        h1,
        .h1,
        h2,
        .h2,
        h3,
        .h3 {
            margin: 10px;
            font-weight: 200;
        }

        h1,
        .h1 {
            font-size: 30px;
        }

        h2,
        .h2 {
            font-size: 24px;
        }

        h3,
        .h3 {
            font-size: 20px;
        }

        table {
            width: 100%;
        }

        .table>thead>tr>th,
        .table>tbody>tr>th,
        .table>tfoot>tr>th,
        .table>thead>tr>td,
        .table>tbody>tr>td,
        .table>tfoot>tr>td {
            /*border-color: #ECEFF1;*/
        }

        .table-bordered>tbody>tr,
        .table-bordered>tfoot>tr {
            background-color: white;
        }

        .table-bordered>tbody>tr>td,
        .table-bordered>tfoot>tr>td {
            padding-left: 20px;
            padding-right: 20px;
            padding-bottom: 10px;
            padding-top: 10px;
            border-color: #ECEFF1;
        }

        .step-table .step-name {
            text-align: left;
        }

        .step-table .step-result {
            text-align: left;
        }

        .step-table .step-line {
            color: grey;
            text-align: right;
            display: inline;
        }

        span.error {
            color: #AD2B2B;
        }

        span.success {
            color: #53891E;
        }

        span.pending {
            color: grey;
        }

        .suite-header {
            cursor: pointer;
        }

        .expandable-control {
            cursor: pointer;
        }

        .suite-pass {
            background-color: #C8E6C9;
        }

        .suite-fail {
            background-color: #FFCDD2;
        }

        .suite-pending {
            background-color: #B5C8D1;
        }

        .suite-unknown {
            background-color: #5EA3D1;
        }

        .test-pass,
        .test-fail,
        .test-skipped,
        .test-unknown {
            background-color: #D3C0F9;
        }

        .pre {
            display: block;
            padding: 9.5px;
            margin: 0 0 10px;
            margin-left: 0px;
            font-size: 13px;
            line-height: 1.42857143;
            color: #333;
            word-break: break-all;
            word-wrap: break-word;
            background-color: #f5f5f5;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .visreg-table {
            display: block;
            margin: 0 0 0 20px;
            font-size: 13px;
            line-height: 1.42857143;
            word-break: break-all;
            word-wrap: break-word;
            background-color: #C8E6C9;
            width: 100%;
        }

        .visreg-table tr {
            width: 100%;
        }

        .visreg-table, 
        .visreg-table>tbody>tr, 
        .visreg-table>tbody>tr>td {
            border-top: none;
        }

        .visreg-pass>tbody>tr, .visreg-pass>tbody>tr>td  {
            background-color: #C8E6C9;
        }

        .visreg-fail>tbody>tr, .visreg-fail>tbody>tr>td{
            background-color: #FFCDD2;
        }

        .visreg-new>tbody>tr, .visreg-new>tbody>tr>td{
            background-color: #B5C8D1;
        }

        .log-output {
            background-color: rgba(255, 192, 0, 0.36);
            margin-left: 24px;
        }

        .screenshotWrapper {
            max-width: 1024px;
            margin-left: 24px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .screenshot {}

        .screenshot-small {
            width: 95%;
        }

        .table-test {
            margin: 0px;
        }

        .test-row, .test-row>td {
            border-collapse: collapse;
            border-top: none;
        }

        .test-iteration {
            background-color: #9bf8ff;
        }

        .assert {
            background-color: #a39eff;
            margin-left: 24px;
            font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
        }

        .stack {
            background-color: rgba(156, 135, 255, 0.36);
            margin-left: 24px;
        }

        .filter {
            border: 1px solid;
            padding: 8px;
            background-color: #ddd;
            /*color:white;*/
        }

        .filterOff {
            border: 1px solid;
            padding: 8px;
            background-color: #aaa;
            /*color:white;*/
        }

        /* Style the accordion panel. Note: hidden by default */
        .panel {
            padding: 0 18px;
            display: none;
            overflow: hidden;
        }

        .image-title-cell {
            vertical-align: top;
            width: 33%;
            text-align: center;
            border-bottom: none;
        }

        .image-cell {
            vertical-align: top;
            width: 33%;
            border-top: none;
        }

        .loader {
            position: relative;
            border: 10px solid #f3f3f3; /* Light grey */
            border-top: 10px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 80px;
            height: 80px;
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }        

    </style>
</head>

<body>
    <div class="container">

        <div id="wdio-html-report" class="page-header">
            <h1>{{title}}</h1>
        </div>

        <div class="modal fade" id="progressModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">New Baseline Images Upload Progress</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="loader img-responsive center-block"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>


        <h2>Summary</h2>
        <table class="table">
            <tbody>
                <tr>
                    <td>Start</td>
                    <td>{{metrics.start}}</td>
                </tr>
                <tr>
                    <td>End</td>
                    <td>{{metrics.end}}</td>
                </tr>
                <tr>
                    <td>Duration</td>
                    <td>{{#humanizeDuration metrics.duration}}{{/humanizeDuration}}</td>
                </tr>
                <tr>
                    <td>Base URL</td>
                    <td>{{info.config.baseUrl}}</td>
                </tr>        
                <tr>
                    <td>Browser</td>
                    <td>{{info.capabilities.browserName}}</td>
                </tr>
                <tr>
                    <td>WebDriver</td>
                    <td>{{info.config.hostname}}:{{info.config.port}}</td>
                </tr>


                <tr>
                    <td>Breakdown</td>
                    <td>
                        <table class="table table-bordered">
                            <tr>
                                <td class='suite-pass'>Passed</td>
                                <td class='suite-pending'>Skipped</td>
                                <td class='suite-fail'>Failures</td>
                            </tr>
                            <tr>
                                <td>{{metrics.passed}}</td>
                                <td>{{metrics.skipped}}</td>
                                <td>{{metrics.failed}}</td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </tbody>
        </table>

        <h2>Results</h2>

        <table class="table table-bordered">
            <tr>
                <td>
                    <table class="">
                        <tr>
                            <td width="100px" style="vertical-align: top;"><span>Github Repo</span></td><td><input type="text" size="80" id="github-repo" value="{{gitRemote}}" /></td>
                        </tr>
                        <tr>
                            <td width="100px" style="vertical-align: top;"><span>Github Branch</span></td><td><input type="text" size="80" id="github-branch" value="master" /></td>
                        </tr>
                        <tr>
                            <td width="100px" style="vertical-align: top;">
                                <span>Github Token</span></td><td><input type="text" size="80" id="github-token" value="" />
                                <br/>
                                <span>To create a token, you need a Github account, then go <a href="https://github.com/settings/tokens">here</a> and follow <a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line"> these instructions</a>. Store the token in a safe place to re-use it.</span>
                                <br/>
                                <br/>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2"><input type="button" id="updateImagesInGithub" value="Update selected images" /></td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <span class="filter toggleFailingTests"><span>Hide</span> Failing Tests</span>
                    <span class="filter togglePassingTests"><span>Hide</span> Passing Tests</span>
                </td>
            </tr>
        </table>        
        <table>
            <tr>
                <td>
                    <table class="table table-bordered">
                        <tr>
                            <td colspan="2">
                                <table class="table table-bordered">
                                    {{#if specs }}
                                    {{#each specs as | spec|}}
                                    <tr>
                                        <td>Spec File</td>
                                        <td>{{spec}}</td>
                                        {{/each}}
                                        {{else}}
                                        {{#each info.specs as | spec|}}
                                    <tr>
                                        <td>Spec File</td>
                                        <td>{{spec}}</td>
                                        {{/each}}
                                        {{/if}}
                                        {{#each suites as |suite| }}
                                        {{#isValidSuite suite}}
                                        <table class="table table-bordered table-suite {{#suiteStateColour suite.tests}}{{/suiteStateColour}}-table">
                                            <tr class="suite-header">
                                                <td colspan="2"
                                                    class="{{#suiteStateColour suite.tests}}{{/suiteStateColour}}">
                                                    <h3>
                                                        <span
                                                            style="margin: 2px; padding: 1px">&nbsp;</span>{{suite.title}}
                                                    </h3>
                                                </td>
                                            </tr>

                                            {{#ifSuiteHasTests suite.tests}}
                                            <tr>
                                                <td>Suite Start</td>
                                                <td>{{suite.start}}</td>
                                            </tr>
                                            <tr>
                                                <td>Suite End</td>
                                                <td>{{suite.end}}</td>
                                            </tr>
                                            <tr>
                                                <td>Suite Duration</td>
                                                <td>{{#humanizeDuration suite._duration}}{{/humanizeDuration}}</td>
                                            </tr>


                                            <tr>
                                                <td colspan="2">
                                                    <h4>{{suite.tests.length}}&nbsp;Test(s):</h4>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td colspan="2">
                                                    <table class="">
                                                        {{#each suite.tests as |test|}}
                                                        <tr>
                                                            <td>
                                                                <table class="table table-test">
                                                                    <tr>
                                                                        <td colspan="2"
                                                                            class="{{#testStateColour test.state}}{{/testStateColour}}">
                                                                            {{#testStateIcon test.state}}{{/testStateIcon}}
                                                                            {{test.title}}</td>
                                                                    </tr>
                                                                    <!--tooooo verbose-->
                                                                    <!--<tr>-->
                                                                    <!--<td>Test Start</td>-->
                                                                    <!--<td>{{test.start}}</td>-->
                                                                    <!--</tr>-->
                                                                    <!--<tr>-->
                                                                    <!--<td>Test End</td>-->
                                                                    <!--<td>{{test.end}}</td>-->
                                                                    <!--</tr>-->

                                                                    {{#each test.events as |event|}}
                                                                    {{!-- {{#ifEventIsError event}}
                                                                            <tr class="test-row ">
                                                                                <td colspan="2" >
                                                                                    <p class="pre assert expandable-control">
                                                                                        <span style="margin: 2px; padding: 1px" class='glyphicon glyphicon-chevron-down'>&nbsp;</span>
                                                                                        Assertion: {{event.message}}
                                                                                    </p>
                                                                                </td>
                                                                            </tr>
                                                                        {{#if event.stack }}
                                                                            <tr class="test-row">
                                                                                <td colspan="2">
                                                                                   <pre class='pre stack panel'>{{event.stack}}</pre>
                                                                                </td>
                                                                            </tr>
                                                                        {{/if}}
                                                                        {{/ifEventIsError}}

                                                                        {{#ifEventIsScreenshot event}}
                                                                        <tr class="test-row screenshot">
                                                                            <td colspan="2">
                                                                                <div class="screenshotWrapper">
                                                                                    <img class="toggle screenshot screenshot-small"
                                                                                         src="{{#imageAsBase64
                                                                                                 event.value
                                                                                                 runnerStat.config.screenshotPath}}{{/imageAsBase64}}"/>
                                                                                </div>
                                                                            </td>
                                                                        </tr>
                                                                        {{/ifEventIsScreenshot}}

                                                                        {{#ifEventIsLogMessage event}}
                                                                            <tr class="test-row log">
                                                                                <td colspan="2">
                                                                                    <pre class='pre {{logClass event.value}}'>{{event.value}}</pre>
                                                                                </td>
                                                                            </tr>
                                                                        {{/ifEventIsLogMessage}} --}}

                                                                    {{#ifEventIsVisRegPass event}}
                                                                    <tr border="1" class="test-row log">
                                                                        <td colspan="2" style="padding: 0px">
                                                                            <table class="table visreg-table visreg-pass">
                                                                                <tr>
                                                                                    <td colspan="3"><span style="font-weight: bold">Image Path: </span><span style="font-style: italic">{{event.value.baseline}}</span></td>
                                                                                </tr>
                                                                                <tr>
                                                                                    <th class="image-title-cell">
                                                                                        Baseline (Expected)
                                                                                    </th>
                                                                                    <th class="image-title-cell">
                                                                                        Actual
                                                                                    </th>
                                                                                    <th class="image-title-cell"></th>
                                                                                </tr>
                                                                                <tr>
                                                                                    <td class="image-cell">
                                                                                        <img class="toggle screenshot screenshot-small"
                                                                                            src="{{#imageAsBase64
                                                                                                            event.value.baseline
                                                                                                            runnerStat.config.screenshotPath}}{{/imageAsBase64}}" />
                                                                                    </td>
                                                                                    <td class="image-cell">
                                                                                        <img class="toggle screenshot screenshot-small"
                                                                                            src="{{#imageAsBase64
                                                                                                            event.value.actual
                                                                                                            runnerStat.config.screenshotPath}}{{/imageAsBase64}}" />

                                                                                    </td>
                                                                                    <td class="image-cell"></td>
                                                                                </tr>
                                                                            </table>
                                                                        </td>
                                                                    </tr>
                                                                    {{/ifEventIsVisRegPass}}

                                                                    {{#ifEventIsVisRegFail event}}
                                                                    <tr border="1" class="test-row log">
                                                                        <td colspan="2" style="padding: 0px">
                                                                            <table class="table visreg-table visreg-fail">
                                                                                <tr>
                                                                                    <td colspan="3"><span style="font-weight: bold">Image Path: </span><span style="font-style: italic">{{event.value.baseline}}</span></td>
                                                                                </tr>
                                                                                
                                                                                <tr>
                                                                                    <td colspan="3">
                                                                                        <span style="font-weight: bold;">Set the "Actual" image as new baseline</span>
                                                                                        <input type="checkbox"
                                                                                            name="update-baseline-image"
                                                                                            value="{{event.value.baseline}}" />
                                                                                    </td>
                                                                                </tr>
                                                                                <tr>
                                                                                    <th class="image-title-cell">
                                                                                        Baseline (Expected)
                                                                                    </th>
                                                                                    <th class="image-title-cell">
                                                                                        Diff
                                                                                    </th>
                                                                                    <th class="image-title-cell">
                                                                                        Actual
                                                                                    </th>
                                                                                </tr>
                                                                                <tr>
                                                                                    <td class="image-cell">
                                                                                        <img class="toggle screenshot screenshot-small"
                                                                                            src="{{#imageAsBase64
                                                                                                            event.value.baseline
                                                                                                            runnerStat.config.screenshotPath}}{{/imageAsBase64}}" />
                                                                                    </td>
                                                                                    <td class="image-cell">
                                                                                        <img class="toggle screenshot screenshot-small"
                                                                                            src="{{#imageAsBase64
                                                                                                            event.value.diff
                                                                                                            runnerStat.config.screenshotPath}}{{/imageAsBase64}}" />
                                                                                    </td>
                                                                                    <td class="image-cell">
                                                                                        <img class="toggle screenshot screenshot-small"
                                                                                            data-filename="{{event.value.baseline}}"
                                                                                            src="{{#imageAsBase64
                                                                                                            event.value.actual
                                                                                                            runnerStat.config.screenshotPath}}{{/imageAsBase64}}" />

                                                                                    </td>
                                                                                </tr>
                                                                            </table>
                                                                        </td>
                                                                    </tr>
                                                                    {{/ifEventIsVisRegFail}}

                                                                    {{#ifEventIsVisRegSkip event}}
                                                                    <tr border="1" class="test-row log">
                                                                        <td colspan="2" style="padding: 0px">
                                                                            <table class="table visreg-table visreg-new">
                                                                                <tr>
                                                                                    <td colspan="3"><span style="font-weight: bold">Image Path: </span><span style="font-style: italic">{{event.value.baseline}}</span></td>
                                                                                </tr>
                                                                                <tr>
                                                                                    <td colspan="3">
                                                                                        <span style="font-weight: bold;">Set the "Actual" image as new baseline</span>
                                                                                        <input type="checkbox"
                                                                                            name="update-baseline-image"
                                                                                            value="{{event.value.baseline}}" />
                                                                                    </td>
                                                                                </tr>
                                                                                <tr>
                                                                                    <th class="image-title-cell">
                                                                                        Actual
                                                                                    </th>
                                                                                    <td class="image-title-cell"></td>
                                                                                    <td class="image-title-cell"></td>
                                                                                </tr>
                                                                                <tr>
                                                                                    <td class="image-cell">
                                                                                        <img class="toggle screenshot screenshot-small"
                                                                                            data-filename="{{event.value.baseline}}"
                                                                                            src="{{#imageAsBase64
                                                                                                            event.value.actual
                                                                                                            runnerStat.config.screenshotPath}}{{/imageAsBase64}}" />

                                                                                    </td>
                                                                                    <td class="image-cell"></td>
                                                                                    <td class="image-cell"></td>
                                                                                </tr>
                                                                            </table>
                                                                        </td>
                                                                    </tr>
                                                                    {{/ifEventIsVisRegSkip}}
                                                                    {{/each}}
                                                                </table>
                                                            </td>
                                                        <tr>
                                                            {{/each}}
                                                    </table>
                                                </td>
                                            </tr>
                                            {{/ifSuiteHasTests}}
                                        </table>
                                        {{/isValidSuite}}
                                        {{/each}}
                                </table>
                            </td>
                        </tr>
                    </table>
        </table>
    </div>

    <script type="text/javascript">
        // increase/decrease size of screenshot
        $('.screenshot').click(function () {
            var d = window.open().document;
            d.write(''); d.close();
            d.body.appendChild(document.createElement('img')).src = $(this).attr('src');
            // $(this).toggleClass('screenshot-large screenshot-small');
        });

        $.each($('.suite-header'), function () {
            if (!$(this).children().hasClass("suite-unknown")) {
                // $(this).find('span').text(function(_, value){return value=='-'?'+':'-'});
                // $(this).find('span').toggleClass(function(_, value){return value=='glyphicon glyphicon-chevron-down'?'glyphicon glyphicon-chevron-up':'glyphicon glyphicon-chevron-down'});
                $(this).find('span').addClass('glyphicon glyphicon-chevron-down');
                $(this).nextUntil('.suite-header').slideToggle(100, function () {
                });
            }
        });

        //hide the suites/scenarios
        $('.suite-header').click(function () {
            if (!$(this).children().hasClass("suite-unknown")) {
                $(this).find('span').toggleClass('glyphicon glyphicon-chevron-down', 'glyphicon glyphicon-chevron-up', true);
                $(this).find('span').toggleClass('glyphicon glyphicon-chevron-up', 'glyphicon glyphicon-chevron-down', true);
                $(this).nextUntil('.suite-header').slideToggle(100, function () { });
            }
        });

        $('.toggleFailingTests').click(function () {
            $.each($('.suite-fail-table'), function () {
                if ($(this).parent().find('span').hasClass('glyphicon-chevron-up')) {
                    $(this).parent().find('span').toggleClass('glyphicon glyphicon-chevron-down', 'glyphicon glyphicon-chevron-up', true);
                    $(this).parent().find('span').toggleClass('glyphicon glyphicon-chevron-up', 'glyphicon glyphicon-chevron-down', true);
                    $(this).parent().nextUntil('.suite-header').slideUp();
                }
                $(this).slideToggle();
            })
            $(this).find('span').text(function (_, value) {
                return value == 'Show' ? 'Hide' : 'Show'
            });
            $(this).toggleClass('filter', 'filterOff', true);
            $(this).toggleClass('filterOff', 'filter', true);
        });

        $('.togglePassingTests').click(function () {
            $.each($('.suite-pass-table'), function () {
                if ($(this).parent().find('span').hasClass('glyphicon-chevron-up')) {
                    $(this).parent().find('span').toggleClass('glyphicon glyphicon-chevron-down', 'glyphicon glyphicon-chevron-up', true);
                    $(this).parent().find('span').toggleClass('glyphicon glyphicon-chevron-up', 'glyphicon glyphicon-chevron-down', true);
                    $(this).parent().nextUntil('.suite-header').slideUp();
                }
                $(this).slideToggle();
            })
            $(this).find('span').text(function (_, value) {
                return value == 'Show' ? 'Hide' : 'Show'
            });
            $(this).toggleClass('filter', 'filterOff', true);
            $(this).toggleClass('filterOff', 'filter', true);
        });


        $('.expandable-control').on('click', function () {
            $(this).find('span').toggleClass('glyphicon glyphicon-chevron-down', 'glyphicon glyphicon-chevron-up', true);
            $(this).find('span').toggleClass('glyphicon glyphicon-chevron-up', 'glyphicon glyphicon-chevron-down', true);
            let panel = $(this).parents('.test-row').next().find('.pre.stack.panel');
            panel.slideToggle(100, function () { });
        });


        $('#updateImagesInGithub').on('click', async function () {
            $("#progressModal").modal('show');

            const githubToken = $('#github-token').val();
            const githubRepo = $('#github-repo').val();
            const githubParentBranch = $('#github-branch').val();
            
            var date = new Date().toLocaleDateString().split(/[/]/).reverse().map(e => e.padStart(2, "0")).join('');
            var time = new Date().toLocaleTimeString().replace(/:/g, '');            
            const newBranchName = `visreg-${date}-${time}`;

            $('#progressModal .modal-body').append("Uploading images & creating Pull Request...<br/>");

            const getUserRes = await getAuthenticatedUser(githubToken);
            if (!getUserRes) {
                return;
            }
            const { name, email } = getUserRes;

            const parentBranchSha = await getBranchSha(githubToken, githubRepo, githubParentBranch);
            if (!parentBranchSha) {
                return;
            }

            const newBranchSha = await createNewBranchSha(githubToken, githubRepo, parentBranchSha, newBranchName);
            if (!newBranchSha) {
                return;
            }

            const uploadedFileShas = await uploadAllSelectedImageBlobs(githubToken, githubRepo);

            const newTreeSha = await getNewTreeSha(githubToken, githubRepo, newBranchSha, uploadedFileShas);
            if (!newTreeSha) {
                return;
            }

            const newCommitSha = await getNewCommitSha(githubToken, githubRepo, name, email, newBranchSha, newTreeSha);
            if (!newCommitSha) {
                return;
            }

            const newReference = await updateReference(githubToken, githubRepo, newBranchName, newCommitSha);
            if (!newReference) {
                return;
            }

            const prUrl = await createPullRequest(githubToken, githubRepo, githubParentBranch, newBranchName);
            if (!prUrl) {
                return;
            }

            $('#progressModal .modal-body').append("Upload complete<br/>");
            $('.loader')[0].setAttribute('style', 'display: none');
            $('#progressModal .modal-body').append(`<a href="${prUrl}">Pull Request created successfully</a>`);
        });

        async function createPullRequest(token, repo, parentBranchName, newBranchName) {
            const data = {
                title: "PR for Visual Regression",
                body: "",
                head: newBranchName,
                base: parentBranchName
            }

            const res = await fetch(`https://api.github.com/repos/${repo}/pulls`, {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${token}`
                },
                body: JSON.stringify(data)
            });
            const resBody = await res.json();

            if (res.status !== 201) {
                alert(`Error creating pull request :: ${JSON.stringify(resBody)}`);
                return null;
            }
            return resBody.html_url;
        }        

        async function updateReference(token, repo, branchName, commitSha) {
            const data = {
                sha: commitSha,
                force: true
            }

            const res = await fetch(`https://api.github.com/repos/${repo}/git/refs/heads/${branchName}`, {
                method: 'PATCH',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${token}`
                },
                body: JSON.stringify(data)
            });
            const resBody = await res.json();

            if (res.status !== 200) {
                alert(`Error updating reference :: ${JSON.stringify(resBody)}`);
                return null;
            }
            return resBody.ref;
        }

        async function getNewCommitSha(token, repo, name, email, branchsha, treeSha) {
            const data = {
                message: "Update baseline images via wdio-fefanf-html-visreg-reporter",
                author: {
                    name,
                    email,
                    date: new Date()
                },
                parents: [branchsha],
                tree: treeSha
            }

            const res = await fetch(`https://api.github.com/repos/${repo}/git/commits`, {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${token}`
                },
                body: JSON.stringify(data)
            });
            const resBody = await res.json();

            if (res.status !== 201) {
                alert(`Error creating commit :: ${JSON.stringify(resBody)}`);
                return null;
            }
            return resBody.sha;
        }

        async function getNewTreeSha(token, repo, branchsha, uploadedFileShas) {
            const data = {
                base_tree: branchsha,
                tree: []
            }

            data.tree = uploadedFileShas.map(file => {
                return {
                    path: file.fileName.replace('./', ''),
                    mode: "100644",
                    type: "blob",
                    sha: file.fileSha
                }
            });

            const res = await fetch(`https://api.github.com/repos/${repo}/git/trees`, {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${token}`
                },
                body: JSON.stringify(data)
            });
            const resBody = await res.json();

            if (res.status !== 201) {
                alert(`Error creating tree :: ${JSON.stringify(resBody)}`);
                return null;
            }
            return resBody.sha;
        }

        async function uploadAllSelectedImageBlobs(token, repo) {
            const selectedImages = $('[name="update-baseline-image"]:checked');
            let uploadCompletions = 0;
            const res = await Promise.all(selectedImages.map(async function (index) {
                const fileName = $(this).val();
                const src = $(`[data-filename="${fileName}"]`)[0].getAttribute('src').replace('data:image/png;base64,', '');

                const data = {
                    encoding: 'base64',
                    content: src
                };

                const res = await fetch(`https://api.github.com/repos/${repo}/git/blobs`, {
                    method: 'POST',
                    cache: 'no-cache',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `token ${token}`
                    },
                    body: JSON.stringify(data)
                });
                const resBody = await res.json();
                if (res.status !== 201) {
                    alert(`Error uploading ${fileName}: ${resBody}`);
                    return null;
                }

                uploadCompletions += 1;
                $('#progressModal .modal-body').append(`<p>Upload ${uploadCompletions}/${selectedImages.length} complete: ${fileName}</p>`);

                return {
                    fileName,
                    fileSha: resBody.sha
                }
            }));

            return res;
        }

        async function createNewBranchSha(token, repo, parentBranchSha, newBranchName) {
            const data = {
                ref: `refs/heads/${newBranchName}`,
                sha: parentBranchSha
            }

            const res = await fetch(`https://api.github.com/repos/${repo}/git/refs`, {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${token}`
                },
                body: JSON.stringify(data)
            });
            const resBody = await res.json();

            if (res.status !== 201) {
                alert(`Error getting details for user in github with token '${token}' => statusCode: ${res.statusCode} :: ${JSON.stringify(resBody)}`);
                return null;
            }
            return resBody.object.sha;
        }

        async function getBranchSha(token, repo, parentBranch) {
            const res = await fetch(`https://api.github.com/repos/${repo}/git/matching-refs/heads/${parentBranch}`, {
                method: 'GET',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${token}`
                }
            });
            const resBody = await res.json();

            if (res.status !== 200) {
                alert(`Error getting details for user in github with token '${token}' => statusCode: ${res.statusCode} :: ${JSON.stringify(resBody)}`);
                return null;
            }
            return resBody[0].object.sha;
        }

        async function getAuthenticatedUser(token) {
            const res = await fetch('https://api.github.com/user', {
                method: 'GET',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `token ${token}`
                }
            });
            const resBody = await res.json();

            if (res.status !== 200) {
                alert(`Error getting details for user in github with token '${token}' => statusCode: ${res.statusCode} :: ${JSON.stringify(resBody)}`);
                return null;
            }
            return resBody;
        }        
    </script>
</body>

</html>